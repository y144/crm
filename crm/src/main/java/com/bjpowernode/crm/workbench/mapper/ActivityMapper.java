package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int updateByPrimaryKey(Activity record);

    /**
    * 保存创建的市场活动
    *//*
    int insertActivity(Activity activity);

    *//**
    * 根据条件分页查询市场活动
    *//*
    List<Activity> selectActivityForPageByCondition(Map<String, Object> map);

    *//**
    * 根据条件查询市场活动总条数
    *//*
    long selectCountOfActivityByCondition(Map<String, Object> map);
    *//**
    * 根据id查询市场活动
    *//*
    Activity selectActivityById(String id);

    *//**
    * 保存修改的市场活动
    *//*
    int updateActivity(Activity activity);

    *//**
    * 根据ids批量删除市场活动
    *//*
    int deleteActivityByIds(String[] ids);

    *//**
    * 查询所有的市场活动
    *//*
    List<Activity> selectAllActivityForDetail();
    *//**
    * 根据ids查询市场活动
    *//*
    List<Activity> selectActivityForDetailByIds(String[] ids);

    *//**
    * 批量保存创建的市场活动
    *//*
    int insertActivityByList(List<Activity> activityList);

    *//**
    * 根据id查询市场活动的明细信息
    *//*
    Activity selectActivityForDetailById(String id);

    *//**
    * 根据clueId查询跟该线索相关联的市场活动明细信息
    *//*
    List<Activity> selectActivityForDetailByClueId(String clueId);
    
    *//**
    * 根据name模糊查询市场活动，并且把已经跟clueId关联过的市场活动排除
    *//*
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    *//**
    * 根据name模糊查询市场活动
    *//*
    List<Activity> selectActivityForDetailByName(String name);

    *//**
     * 检索不属于cludId的市场活动
     *//*
    List<Activity> searchActivityNoBoundById(Map<String, Object> map);*/

    //保存创建的市场活动
    int insertActivity(Activity activity);

    //根据条件分叶查询市场活动
    List<Activity> selectActivityForPageByCondition(Map<String,Object> map);

    //根据条件查询市场条件的总数
    long selectContOfActivityCondition(Map<String,Object> map);

    //根据id查询市场活动
    Activity selectActivityById(String id);

    //保存修改市场活动
    int updateActivity(Activity activity);

    //根据多个id进行批量删除
    int deleteActivityByIds(String[] ids);

    //批量导出市场活动信息使用，需要在数据库中取出所有的市场活动信息
    List<Activity> queryAllActivityForDetail();

    //根据id查询市场活动的明细
    Activity selectActivityForDetailById(String id);

    //批量导入保存创建的市场活动
    int insertActivityByList(List<Activity> activityList);

    //选择导出多个市场活动信息
    List<Activity> queryActivitySelective(String[] ids);

    //根据线索id来查找市场活动
    List<Activity> queryActivityForDetailByClueId(String clueId);

    //检索不属于cludId的市场活动
    List<Activity> searchActivityNoBoundById(Map<String,Object> map);
}